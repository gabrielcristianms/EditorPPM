O que foi feito: as funcionalidades basicas do sistema foram todas implementadas que são abrir e salvar imagens no formato .ppm, ampliar, reduzir, rotacionar, binarização, aplicação de filtros como blurring e sharpening atráves de convolução, detecção de bordas e escala de cinza

O que não foi feito: nenhuma das funcionalidades extras foram implementadas, sendo que a que tinha sido escolhido foi a de plotagem de gráficos de funções

O que seria feito diferente: tratamento de erros, creio que neste projeto seja necessário uma implementação mais detalhada, da maneira que está, talvez seja possível abrir uma imagem que não está no formato .ppm caso ela comece com "P3\n". Esse é um exemplo, creio que existam outros quanto aos tamanhos máximos dos nomes para abrir arquivo e salvar. A parte de comentários, explicando melhor o que cada parte do código faz.E o menu em linha de comando poderia ter sido mais bem feito e com tratamento de erro melhor. Uma coisa que foi necessário aprender durante a implementação desse projeto foi alocação dinâmica, ajudou bastante ao fazer processamento de imagens maiores.

Como compilar: Este projeto consiste de 7 arquivos (4 .c e 3.h) que foram compilados no gcc do MinGW. Os arquivos consistem em img.c e img.h (responsáveis pelas definições dos tipos e funções mais básicas relacionadas à imagens no formato .ppm), img_file.c e img_file.h (responsáveis pelas funções relacionadas a leitura e escrita de imagens no formato .ppm), img_edit.c e img_edit.h (responsáveis pelas definições das funções relacionadas a edição de imagens, como filtros e modificações) e o main.c. Nenhuma biblioteca externa foi utilzada, basta executar o comando "gcc img.c img_file.c img_edit.c main.c -o nome" para gerar um binário, com nome sendo o nome que você quiser.